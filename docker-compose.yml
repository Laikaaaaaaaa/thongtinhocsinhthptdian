version: '3.8'

services:
  # Flask Application
  web:
    build: .
    expose:
      - "5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///students.db
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_EMAIL=${SMTP_EMAIL}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ADMIN_ACCOUNTS=${ADMIN_ACCOUNTS}
      - DEBUG_OTP=${DEBUG_OTP}
    volumes:
      - .:/app
      - ./students.db:/app/students.db
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:alpine
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    command: redis-server --appendonly yes

  # PostgreSQL (for future migration)
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: thpt_di_an
      POSTGRES_USER: ${POSTGRES_USER:-thpt_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis_data:
  postgres_data:

networks:
  app-network:
    driver: bridge
